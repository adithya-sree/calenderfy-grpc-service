// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: proto/calendarfy_service.proto

package calendarfy_service

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_calendarfy_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_calendarfy_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_proto_calendarfy_service_proto_rawDescGZIP(), []int{0}
}

type RunningResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Running bool `protobuf:"varint,1,opt,name=running,proto3" json:"running,omitempty"`
}

func (x *RunningResponse) Reset() {
	*x = RunningResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_calendarfy_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunningResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunningResponse) ProtoMessage() {}

func (x *RunningResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_calendarfy_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunningResponse.ProtoReflect.Descriptor instead.
func (*RunningResponse) Descriptor() ([]byte, []int) {
	return file_proto_calendarfy_service_proto_rawDescGZIP(), []int{1}
}

func (x *RunningResponse) GetRunning() bool {
	if x != nil {
		return x.Running
	}
	return false
}

type UptimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uptime    int64  `protobuf:"varint,1,opt,name=uptime,proto3" json:"uptime,omitempty"`
	StartedAt string `protobuf:"bytes,2,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
}

func (x *UptimeResponse) Reset() {
	*x = UptimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_calendarfy_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UptimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UptimeResponse) ProtoMessage() {}

func (x *UptimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_calendarfy_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UptimeResponse.ProtoReflect.Descriptor instead.
func (*UptimeResponse) Descriptor() ([]byte, []int) {
	return file_proto_calendarfy_service_proto_rawDescGZIP(), []int{2}
}

func (x *UptimeResponse) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *UptimeResponse) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

var File_proto_calendarfy_service_proto protoreflect.FileDescriptor

var file_proto_calendarfy_service_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x66, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x2b, 0x0a, 0x0f, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x46, 0x0a,
	0x0e, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x32, 0x62, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x66, 0x79, 0x12, 0x2a, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x0d,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x06, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x0d, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x55, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_calendarfy_service_proto_rawDescOnce sync.Once
	file_proto_calendarfy_service_proto_rawDescData = file_proto_calendarfy_service_proto_rawDesc
)

func file_proto_calendarfy_service_proto_rawDescGZIP() []byte {
	file_proto_calendarfy_service_proto_rawDescOnce.Do(func() {
		file_proto_calendarfy_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_calendarfy_service_proto_rawDescData)
	})
	return file_proto_calendarfy_service_proto_rawDescData
}

var file_proto_calendarfy_service_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_calendarfy_service_proto_goTypes = []interface{}{
	(*EmptyRequest)(nil),    // 0: EmptyRequest
	(*RunningResponse)(nil), // 1: RunningResponse
	(*UptimeResponse)(nil),  // 2: UptimeResponse
}
var file_proto_calendarfy_service_proto_depIdxs = []int32{
	0, // 0: Calendarfy.Running:input_type -> EmptyRequest
	0, // 1: Calendarfy.Uptime:input_type -> EmptyRequest
	1, // 2: Calendarfy.Running:output_type -> RunningResponse
	2, // 3: Calendarfy.Uptime:output_type -> UptimeResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_calendarfy_service_proto_init() }
func file_proto_calendarfy_service_proto_init() {
	if File_proto_calendarfy_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_calendarfy_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_calendarfy_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunningResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_calendarfy_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UptimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_calendarfy_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_calendarfy_service_proto_goTypes,
		DependencyIndexes: file_proto_calendarfy_service_proto_depIdxs,
		MessageInfos:      file_proto_calendarfy_service_proto_msgTypes,
	}.Build()
	File_proto_calendarfy_service_proto = out.File
	file_proto_calendarfy_service_proto_rawDesc = nil
	file_proto_calendarfy_service_proto_goTypes = nil
	file_proto_calendarfy_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CalendarfyClient is the client API for Calendarfy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalendarfyClient interface {
	Running(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RunningResponse, error)
	Uptime(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*UptimeResponse, error)
}

type calendarfyClient struct {
	cc grpc.ClientConnInterface
}

func NewCalendarfyClient(cc grpc.ClientConnInterface) CalendarfyClient {
	return &calendarfyClient{cc}
}

func (c *calendarfyClient) Running(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RunningResponse, error) {
	out := new(RunningResponse)
	err := c.cc.Invoke(ctx, "/Calendarfy/Running", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarfyClient) Uptime(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*UptimeResponse, error) {
	out := new(UptimeResponse)
	err := c.cc.Invoke(ctx, "/Calendarfy/Uptime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalendarfyServer is the server API for Calendarfy service.
type CalendarfyServer interface {
	Running(context.Context, *EmptyRequest) (*RunningResponse, error)
	Uptime(context.Context, *EmptyRequest) (*UptimeResponse, error)
}

// UnimplementedCalendarfyServer can be embedded to have forward compatible implementations.
type UnimplementedCalendarfyServer struct {
}

func (*UnimplementedCalendarfyServer) Running(context.Context, *EmptyRequest) (*RunningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Running not implemented")
}
func (*UnimplementedCalendarfyServer) Uptime(context.Context, *EmptyRequest) (*UptimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uptime not implemented")
}

func RegisterCalendarfyServer(s *grpc.Server, srv CalendarfyServer) {
	s.RegisterService(&_Calendarfy_serviceDesc, srv)
}

func _Calendarfy_Running_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarfyServer).Running(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calendarfy/Running",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarfyServer).Running(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendarfy_Uptime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarfyServer).Uptime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calendarfy/Uptime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarfyServer).Uptime(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calendarfy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Calendarfy",
	HandlerType: (*CalendarfyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Running",
			Handler:    _Calendarfy_Running_Handler,
		},
		{
			MethodName: "Uptime",
			Handler:    _Calendarfy_Uptime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/calendarfy_service.proto",
}
